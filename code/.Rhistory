plot(l.cv, sub = paste("LASSO:", l.cv$lambda.min))
# Compute ROC
l.roc = roc_table(l.prob_train, l.prob_test)
plot_roc(l.roc, "Lasso")
# Store AUC
l.auc = c(round,
"Lasso",
AUC(x=l.roc$FPR_train, y=l.roc$TPR_train),
AUC(x=l.roc$FPR_test, y=l.roc$TPR_test))
l.time <- Sys.time() - l.time.start
##################################################################################
#                        Ridge Regression                                     #
##################################################################################
r.time.start <-Sys.time()
r.cv <- cv.glmnet(X_train, y_train, family ="binomial", type.measure="auc", alpha=0)
r.fit <- glmnet(X_train, y_train, family="binomial", lambda = r.cv$lambda.min, alpha=0)
# fitting
r.beta0.hat = as.vector(r.fit$a0)
r.beta.hat = as.vector(r.fit$beta)
#Probabilities
r.prob_train = exp(X_train %*% r.beta.hat + r.beta0.hat )/(1+ exp(X_train %*% r.beta.hat + r.beta0.hat ))
r.prob_test = exp(X_test %*% r.beta.hat + r.beta0.hat )/(1 + exp(X_test %*% r.beta.hat + r.beta0.hat ))
plot(r.cv, sub = paste("RIDGE:", r.cv$lambda.min))
# Compute ROC
r.roc = roc_table(r.prob_train, r.prob_test)
plot_roc(r.roc, "Ridge")
# Store AUC
r.auc = c(round,
"Ridge",
AUC(x=r.roc$FPR_train, y=r.roc$TPR_train),
AUC(x=r.roc$FPR_test, y=r.roc$TPR_test))
r.time <- Sys.time() - r.time.start
##################################################################################
#                        Elastic Net Regression                                     #
##################################################################################
#
e.time.start <-Sys.time()
e.cv <- cv.glmnet(X_train, y_train, family = "binomial", type.measure="auc", alpha=0.5)
e.fit <- glmnet(X_train, y_train, family="binomial", lambda =e.cv$lambda.min, alpha=0.5)
# fitting
e.beta0.hat = as.vector(e.fit$a0)
e.beta.hat = as.vector(e.fit$beta)
#Probabilities
e.prob_train = exp(X_train %*% e.beta.hat + e.beta0.hat )/(1+ exp(X_train %*% e.beta.hat + e.beta0.hat ))
e.prob_test = exp(X_test %*% e.beta.hat + e.beta0.hat )/(1 + exp(X_test %*% e.beta.hat + e.beta0.hat ))
plot(e.cv, sub = paste("ELASTIC-NET:", e.cv$lambda.min))
# Compute ROC
e.roc = roc_table(e.prob_train, e.prob_test)
plot_roc(e.roc, "Ridge")
# Store AUC
e.auc = c(round,
"Elastic Net",
AUC(x=e.roc$FPR_train, y=e.roc$TPR_train),
AUC(x=e.roc$FPR_test, y=e.roc$TPR_test))
e.time <- Sys.time() - e.time.start
##################################################################################
#                         Random Forest  Classification                         #
##################################################################################
# # Random Forest
# rf_time_start <- Sys.time()
# classifier = randomForest(X_train, y_train, ntree = 10)
# # rf <- randomForest(label ~ . , X_train)
# # fiting
# rf.y_pred_train <- predict(classifier, X_train)
# rf.y_pred_test <- predict(classifier, X_test)
# rf.residual_train <- as.vector(y_train - rf.y_pred_train)
# rf.residual_test <- as.vector(y_test - rf.y_pred_test)
# # Difference
# delta  <- abs((1 - roc_rf$sensitivities) - (1 - roc_rf$specificties))
# # Best Threshold
# classifier$y
# roc_rf <- roc(y_train, classifier$y)
# theta_rf <- roc_rf$thresholds(which.min(delta))
# rf <- randomForest(y_train ~ ., X_train, cutoff=c(theta_rf, 1- theta_rf))
# # Compute ROC
# rf.roc.train <- roc(y_train, rf$votes[,2])
# rf.roc.test <- roc(y_test, rf$votes[,2])
# # Store AUC
# RF.AUC_TRAIN <- rf.roc.train$auc
# RF.AUC_TEST <- rf.roc.test$auc
# #plots
# plot(classifier)
# rf_time <- Sys.time() - rf_time_start
#
# if(plots) {
#   ## 10 fold CV plots
#   plot(l.cv, sub = paste("Lasso:", l.cv$lambda.min)) #lambda.min
#   plot(r.cv, sub = paste("Ridge:", r.cv$lambda.min)) #lambda.min
#   plot(e.cv, sub = paste("Ridge:", e.cv$lambda.min))
#
# }
#
# AUC_TRAIN <- list(lasso =L.AUC_TRAIN, ridge =R.AUC_TRAIN, elnet = E.AUC_TRAIN, rf = RF.AUC_TRAIN )
# AUC_TEST <- list(lasso =L.AUC_TEST, ridge =R.AUC_TEST, elnet = E.AUC_TEST, rf = RF.AUC_TEST)
#
#
times <- list(lasso = l.time, ridge = r.time,
elnet = e.time, rf = rf.time)
df = data.frame(cbind(l.auc, r.auc, e.auc))
return(df)
#return(list(AUC_TRAIN, AUC_TEST, times))
}
models <- replicate(M, starting(plots = F))
##################################################################################
#                        Lasso Regression                                     #
##################################################################################
l.time.start <-Sys.time()
starting <- function(plots = F) {
round = round + 1
set.seed(round)
#splitting data 10/90 ratio
n_train <-as.integer(0.9*n)
n_test = n - n_train
idx <- sample.int(n, n_train)
#mutually exclusive
D_train <- data[idx, ]
D_test <- data[-idx, ]
# Create X/Y train/test
X_train <- scale(select(D_train, -label)) %>% data.matrix()
X_test <- scale(select(D_test, -label)) %>% data.matrix()
y_train <-as.numeric(D_train$label)
y_test <- as.numeric(D_test$label)
#function to create a dataframe of FPR and TPR for both train and test
roc_table = function(prob_train, prob_test) {
roc = data.frame (matrix(ncol =4, nrow =0))
for (i in seq(0, 1, by =0.01)) {
roc.y.hat.train = ifelse(prob_train > i, 1, 0)
roc.FP.train = sum(y_train[roc.y.hat.train ==1] ==0)
roc.TP.train = sum(roc.y.hat.train[y_train==1]==1)
roc.P.train = sum(y_train==1)
roc.N.train   = sum(y_train ==0)
roc.FPR.train = roc.FP.train/roc.N.train #FPR
roc.TPR.train = roc.TP.train/roc.P.train #TPR
roc.y.hat.test  = ifelse(prob_test >i, 1, 0 )
roc.FP.test    = sum(y_test[roc.y.hat.test==1]==0)
roc.TP.test     = sum(roc.y.hat.test[y_test==1] ==1)
roc.P.test     = sum(y_test==1)
roc.N.test = sum(y_test==0)
roc.TN.test = sum(roc.y.hat.test[y_test==0] == 0)
roc.FPR.test = roc.FP.test/roc.N.test # FPR = type 1 error
roc.TPR.test = roc.TP.test/roc.P.test # TPR = 1 - type 2 error
roc = rbind(roc,c(roc.FPR.train, roc.TPR.train, roc.FPR.test, roc.TPR.test))
}
colnames(roc) = c("FPR_train", "TPR_train", "FPR_test", "TPR_test")
return(roc)
}
#function to plot the ROC curve
plot_roc = function(roc, penalty) {
auc_train = AUC(x=roc$FPR_train, y=roc$TPR_train)
auc_test = AUC(x=roc$FPR_test, y=roc$TPR_test)
ggplot(roc) + geom_line(aes(FPR_train, TPR_train, color = "Train")) +
geom_line(aes(FPR_test, TPR_test, color = "Test")) +
scale_color_manual(name = "Dataset", values=c("Train" = "steelblue","Test" = "darkred")) +
labs(x="FPR", y="TPR") + ggtitle(paste(penalty,"ROC Curve")) +
theme(plot.title = element_text(hjust = 0.5)) +
annotate("label", x=0.5, y=0.5, label = paste("Train AUC:", round(auc_train,3),
"\nTest AUC:", round(auc_test,3))) }
##################################################################################
#                        Lasso Regression                                     #
##################################################################################
l.time.start <-Sys.time()
l.cv <- cv.glmnet(X_train, y_train, family ="binomial", type.measure="auc", alpha=1)
l.fit <- glmnet(X_train, y_train, family="binomial", lambda =l.cv$lambda.min, alpha=1)
# fitting
l.beta0.hat = as.vector(l.fit$a0)
l.beta.hat = as.vector(l.fit$beta)
#Probabilities
l.prob_train = exp(X_train %*% l.beta.hat + l.beta0.hat )/(1+ exp(X_train %*% l.beta.hat + l.beta0.hat ))
l.prob_test = exp(X_test %*% l.beta.hat + l.beta0.hat )/(1 + exp(X_test %*% l.beta.hat + l.beta0.hat ))
plot(l.cv, sub = paste("LASSO:", l.cv$lambda.min))
# Compute ROC
l.roc = roc_table(l.prob_train, l.prob_test)
plot_roc(l.roc, "Lasso")
# Store AUC
l.auc = c(round,
"Lasso",
AUC(x=l.roc$FPR_train, y=l.roc$TPR_train),
AUC(x=l.roc$FPR_test, y=l.roc$TPR_test))
l.time <- Sys.time() - l.time.start
##################################################################################
#                        Ridge Regression                                     #
##################################################################################
r.time.start <-Sys.time()
r.cv <- cv.glmnet(X_train, y_train, family ="binomial", type.measure="auc", alpha=0)
r.fit <- glmnet(X_train, y_train, family="binomial", lambda = r.cv$lambda.min, alpha=0)
# fitting
r.beta0.hat = as.vector(r.fit$a0)
r.beta.hat = as.vector(r.fit$beta)
#Probabilities
r.prob_train = exp(X_train %*% r.beta.hat + r.beta0.hat )/(1+ exp(X_train %*% r.beta.hat + r.beta0.hat ))
r.prob_test = exp(X_test %*% r.beta.hat + r.beta0.hat )/(1 + exp(X_test %*% r.beta.hat + r.beta0.hat ))
plot(r.cv, sub = paste("RIDGE:", r.cv$lambda.min))
# Compute ROC
r.roc = roc_table(r.prob_train, r.prob_test)
plot_roc(r.roc, "Ridge")
# Store AUC
r.auc = c(round,
"Ridge",
AUC(x=r.roc$FPR_train, y=r.roc$TPR_train),
AUC(x=r.roc$FPR_test, y=r.roc$TPR_test))
r.time <- Sys.time() - r.time.start
##################################################################################
#                        Elastic Net Regression                                     #
##################################################################################
#
e.time.start <-Sys.time()
e.cv <- cv.glmnet(X_train, y_train, family = "binomial", type.measure="auc", alpha=0.5)
e.fit <- glmnet(X_train, y_train, family="binomial", lambda =e.cv$lambda.min, alpha=0.5)
# fitting
e.beta0.hat = as.vector(e.fit$a0)
e.beta.hat = as.vector(e.fit$beta)
#Probabilities
e.prob_train = exp(X_train %*% e.beta.hat + e.beta0.hat )/(1+ exp(X_train %*% e.beta.hat + e.beta0.hat ))
e.prob_test = exp(X_test %*% e.beta.hat + e.beta0.hat )/(1 + exp(X_test %*% e.beta.hat + e.beta0.hat ))
plot(e.cv, sub = paste("ELASTIC-NET:", e.cv$lambda.min))
# Compute ROC
e.roc = roc_table(e.prob_train, e.prob_test)
plot_roc(e.roc, "Ridge")
# Store AUC
e.auc = c(round,
"Elastic Net",
AUC(x=e.roc$FPR_train, y=e.roc$TPR_train),
AUC(x=e.roc$FPR_test, y=e.roc$TPR_test))
e.time <- Sys.time() - e.time.start
##################################################################################
#                         Random Forest  Classification                         #
##################################################################################
# # Random Forest
# rf_time_start <- Sys.time()
# classifier = randomForest(X_train, y_train, ntree = 10)
# # rf <- randomForest(label ~ . , X_train)
# # fiting
# rf.y_pred_train <- predict(classifier, X_train)
# rf.y_pred_test <- predict(classifier, X_test)
# rf.residual_train <- as.vector(y_train - rf.y_pred_train)
# rf.residual_test <- as.vector(y_test - rf.y_pred_test)
# # Difference
# delta  <- abs((1 - roc_rf$sensitivities) - (1 - roc_rf$specificties))
# # Best Threshold
# classifier$y
# roc_rf <- roc(y_train, classifier$y)
# theta_rf <- roc_rf$thresholds(which.min(delta))
# rf <- randomForest(y_train ~ ., X_train, cutoff=c(theta_rf, 1- theta_rf))
# # Compute ROC
# rf.roc.train <- roc(y_train, rf$votes[,2])
# rf.roc.test <- roc(y_test, rf$votes[,2])
# # Store AUC
# RF.AUC_TRAIN <- rf.roc.train$auc
# RF.AUC_TEST <- rf.roc.test$auc
# #plots
# plot(classifier)
# rf_time <- Sys.time() - rf_time_start
#
# if(plots) {
#   ## 10 fold CV plots
#   plot(l.cv, sub = paste("Lasso:", l.cv$lambda.min)) #lambda.min
#   plot(r.cv, sub = paste("Ridge:", r.cv$lambda.min)) #lambda.min
#   plot(e.cv, sub = paste("Ridge:", e.cv$lambda.min))
#
# }
#
# AUC_TRAIN <- list(lasso =L.AUC_TRAIN, ridge =R.AUC_TRAIN, elnet = E.AUC_TRAIN, rf = RF.AUC_TRAIN )
# AUC_TEST <- list(lasso =L.AUC_TEST, ridge =R.AUC_TEST, elnet = E.AUC_TEST, rf = RF.AUC_TEST)
#
#
# times <- list(lasso = l.time, ridge = r.time,
#               elnet = e.time, rf = rf.time)
df = data.frame(cbind(l.auc, r.auc, e.auc))
return(df)
#return(list(AUC_TRAIN, AUC_TEST, times))
}
round = 0
M <- 2
models <- replicate(M, starting(plots = F))
models
df
# Store AUC
e.auc = c(round,
AUC(x=e.roc$FPR_train, y=e.roc$TPR_train),
AUC(x=e.roc$FPR_test, y=e.roc$TPR_test))
# Store AUC
r.auc = c(round,
AUC(x=r.roc$FPR_train, y=r.roc$TPR_train),
AUC(x=r.roc$FPR_test, y=r.roc$TPR_test))
# Store AUC
l.auc = c(round,
AUC(x=l.roc$FPR_train, y=l.roc$TPR_train),
AUC(x=l.roc$FPR_test, y=l.roc$TPR_test))
matrix(cbind(l.auc, r.auc, e.auc))
matrix(l.auc, r.auc, e.auc)
cbind(l.auc, r.auc, e.auc)
matrix(cbind(l.auc, r.auc, e.auc))
matrix(cbind(l.auc, r.auc, e.auc), ncol=3)
starting <- function(plots = F) {
round = round + 1
set.seed(round)
#splitting data 10/90 ratio
n_train <-as.integer(0.9*n)
n_test = n - n_train
idx <- sample.int(n, n_train)
#mutually exclusive
D_train <- data[idx, ]
D_test <- data[-idx, ]
# Create X/Y train/test
X_train <- scale(select(D_train, -label)) %>% data.matrix()
X_test <- scale(select(D_test, -label)) %>% data.matrix()
y_train <-as.numeric(D_train$label)
y_test <- as.numeric(D_test$label)
#function to create a dataframe of FPR and TPR for both train and test
roc_table = function(prob_train, prob_test) {
roc = data.frame (matrix(ncol =4, nrow =0))
for (i in seq(0, 1, by =0.01)) {
roc.y.hat.train = ifelse(prob_train > i, 1, 0)
roc.FP.train = sum(y_train[roc.y.hat.train ==1] ==0)
roc.TP.train = sum(roc.y.hat.train[y_train==1]==1)
roc.P.train = sum(y_train==1)
roc.N.train   = sum(y_train ==0)
roc.FPR.train = roc.FP.train/roc.N.train #FPR
roc.TPR.train = roc.TP.train/roc.P.train #TPR
roc.y.hat.test  = ifelse(prob_test >i, 1, 0 )
roc.FP.test    = sum(y_test[roc.y.hat.test==1]==0)
roc.TP.test     = sum(roc.y.hat.test[y_test==1] ==1)
roc.P.test     = sum(y_test==1)
roc.N.test = sum(y_test==0)
roc.TN.test = sum(roc.y.hat.test[y_test==0] == 0)
roc.FPR.test = roc.FP.test/roc.N.test # FPR = type 1 error
roc.TPR.test = roc.TP.test/roc.P.test # TPR = 1 - type 2 error
roc = rbind(roc,c(roc.FPR.train, roc.TPR.train, roc.FPR.test, roc.TPR.test))
}
colnames(roc) = c("FPR_train", "TPR_train", "FPR_test", "TPR_test")
return(roc)
}
#function to plot the ROC curve
plot_roc = function(roc, penalty) {
auc_train = AUC(x=roc$FPR_train, y=roc$TPR_train)
auc_test = AUC(x=roc$FPR_test, y=roc$TPR_test)
ggplot(roc) + geom_line(aes(FPR_train, TPR_train, color = "Train")) +
geom_line(aes(FPR_test, TPR_test, color = "Test")) +
scale_color_manual(name = "Dataset", values=c("Train" = "steelblue","Test" = "darkred")) +
labs(x="FPR", y="TPR") + ggtitle(paste(penalty,"ROC Curve")) +
theme(plot.title = element_text(hjust = 0.5)) +
annotate("label", x=0.5, y=0.5, label = paste("Train AUC:", round(auc_train,3),
"\nTest AUC:", round(auc_test,3))) }
##################################################################################
#                        Lasso Regression                                     #
##################################################################################
l.time.start <-Sys.time()
l.cv <- cv.glmnet(X_train, y_train, family ="binomial", type.measure="auc", alpha=1)
l.fit <- glmnet(X_train, y_train, family="binomial", lambda =l.cv$lambda.min, alpha=1)
# fitting
l.beta0.hat = as.vector(l.fit$a0)
l.beta.hat = as.vector(l.fit$beta)
#Probabilities
l.prob_train = exp(X_train %*% l.beta.hat + l.beta0.hat )/(1+ exp(X_train %*% l.beta.hat + l.beta0.hat ))
l.prob_test = exp(X_test %*% l.beta.hat + l.beta0.hat )/(1 + exp(X_test %*% l.beta.hat + l.beta0.hat ))
plot(l.cv, sub = paste("LASSO:", l.cv$lambda.min))
# Compute ROC
l.roc = roc_table(l.prob_train, l.prob_test)
plot_roc(l.roc, "Lasso")
# Store AUC
l.auc = c(round,
AUC(x=l.roc$FPR_train, y=l.roc$TPR_train),
AUC(x=l.roc$FPR_test, y=l.roc$TPR_test))
l.time <- Sys.time() - l.time.start
##################################################################################
#                        Ridge Regression                                     #
##################################################################################
r.time.start <-Sys.time()
r.cv <- cv.glmnet(X_train, y_train, family ="binomial", type.measure="auc", alpha=0)
r.fit <- glmnet(X_train, y_train, family="binomial", lambda = r.cv$lambda.min, alpha=0)
# fitting
r.beta0.hat = as.vector(r.fit$a0)
r.beta.hat = as.vector(r.fit$beta)
#Probabilities
r.prob_train = exp(X_train %*% r.beta.hat + r.beta0.hat )/(1+ exp(X_train %*% r.beta.hat + r.beta0.hat ))
r.prob_test = exp(X_test %*% r.beta.hat + r.beta0.hat )/(1 + exp(X_test %*% r.beta.hat + r.beta0.hat ))
plot(r.cv, sub = paste("RIDGE:", r.cv$lambda.min))
# Compute ROC
r.roc = roc_table(r.prob_train, r.prob_test)
plot_roc(r.roc, "Ridge")
# Store AUC
r.auc = c(round,
AUC(x=r.roc$FPR_train, y=r.roc$TPR_train),
AUC(x=r.roc$FPR_test, y=r.roc$TPR_test))
r.time <- Sys.time() - r.time.start
##################################################################################
#                        Elastic Net Regression                                     #
##################################################################################
#
e.time.start <-Sys.time()
e.cv <- cv.glmnet(X_train, y_train, family = "binomial", type.measure="auc", alpha=0.5)
e.fit <- glmnet(X_train, y_train, family="binomial", lambda =e.cv$lambda.min, alpha=0.5)
# fitting
e.beta0.hat = as.vector(e.fit$a0)
e.beta.hat = as.vector(e.fit$beta)
#Probabilities
e.prob_train = exp(X_train %*% e.beta.hat + e.beta0.hat )/(1+ exp(X_train %*% e.beta.hat + e.beta0.hat ))
e.prob_test = exp(X_test %*% e.beta.hat + e.beta0.hat )/(1 + exp(X_test %*% e.beta.hat + e.beta0.hat ))
plot(e.cv, sub = paste("ELASTIC-NET:", e.cv$lambda.min))
# Compute ROC
e.roc = roc_table(e.prob_train, e.prob_test)
plot_roc(e.roc, "Ridge")
# Store AUC
e.auc = c(round,
AUC(x=e.roc$FPR_train, y=e.roc$TPR_train),
AUC(x=e.roc$FPR_test, y=e.roc$TPR_test))
e.time <- Sys.time() - e.time.start
##################################################################################
#                         Random Forest  Classification                         #
##################################################################################
# # Random Forest
# rf_time_start <- Sys.time()
# classifier = randomForest(X_train, y_train, ntree = 10)
# # rf <- randomForest(label ~ . , X_train)
# # fiting
# rf.y_pred_train <- predict(classifier, X_train)
# rf.y_pred_test <- predict(classifier, X_test)
# rf.residual_train <- as.vector(y_train - rf.y_pred_train)
# rf.residual_test <- as.vector(y_test - rf.y_pred_test)
# # Difference
# delta  <- abs((1 - roc_rf$sensitivities) - (1 - roc_rf$specificties))
# # Best Threshold
# classifier$y
# roc_rf <- roc(y_train, classifier$y)
# theta_rf <- roc_rf$thresholds(which.min(delta))
# rf <- randomForest(y_train ~ ., X_train, cutoff=c(theta_rf, 1- theta_rf))
# # Compute ROC
# rf.roc.train <- roc(y_train, rf$votes[,2])
# rf.roc.test <- roc(y_test, rf$votes[,2])
# # Store AUC
# RF.AUC_TRAIN <- rf.roc.train$auc
# RF.AUC_TEST <- rf.roc.test$auc
# #plots
# plot(classifier)
# rf_time <- Sys.time() - rf_time_start
#
# if(plots) {
#   ## 10 fold CV plots
#   plot(l.cv, sub = paste("Lasso:", l.cv$lambda.min)) #lambda.min
#   plot(r.cv, sub = paste("Ridge:", r.cv$lambda.min)) #lambda.min
#   plot(e.cv, sub = paste("Ridge:", e.cv$lambda.min))
#
# }
#
# AUC_TRAIN <- list(lasso =L.AUC_TRAIN, ridge =R.AUC_TRAIN, elnet = E.AUC_TRAIN, rf = RF.AUC_TRAIN )
# AUC_TEST <- list(lasso =L.AUC_TEST, ridge =R.AUC_TEST, elnet = E.AUC_TEST, rf = RF.AUC_TEST)
#
#
# times <- list(lasso = l.time, ridge = r.time,
#               elnet = e.time, rf = rf.time)
aucs = matrix(cbind(l.auc, r.auc, e.auc), ncol=3)
return(aucs)
#return(list(AUC_TRAIN, AUC_TEST, times))
}
round = 0
M <- 2
models <- replicate(M, starting(plots = F))
models
class(models)
models[1]
models[[1]]
models[1][1]
models[1][2]
t(models)
t(matrix(models))
matrix(models)
matrix(models,ncol=6)
models
view(models)
unlist(models)
view(unlist(models))
data.frame(models)
t(data.frame(models))
models <- replicate(M, unlist(starting(plots = F))) %>%
data.frame()  %>%
t() %>%
mutate(Model = rep(M, c("Lasso", "Ridge", "Elastic Net")))
models
models %>%
data.frame()
models %>%
data.frame()%>%
t()
models %>%
t()%>%
data.frame()
models %>%
t()
models %>%
data.frame()%>%
t()%>%
data.frame()
models %>%
data.frame()%>%
t()%>%
data.frame()%>%
mutate(Model = rep(M, c("Lasso", "Ridge", "Elastic Net")))
rep(M, c("Lasso", "Ridge", "Elastic Net"))
rep(10, "t")
rep(10, 1)
rep(1, 10)
models %>%
data.frame()%>%
t()%>%
data.frame()%>%
mutate(Model = rep(c("Lasso", "Ridge", "Elastic Net")), M)
rep(c("Lasso", "Ridge", "Elastic Net"), M)
models %>%
data.frame()%>%
t()%>%
data.frame()%>%
mutate(Model = rep(c("Lasso", "Ridge", "Elastic Net"), M))
